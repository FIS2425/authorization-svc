openapi: 3.0.0
info:
  title: Authorization Microservice
  version: 1.0.0
  description: Authorization microservice for medical consultation application. Handles the authorization of users for the entire application.

servers:
  - url: http://localhost:3001

paths:
  /login:
      post:
        summary: User Login
        description: Authenticates a user with their username and password.
        tags:
          - Authentication
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The user's unique userusername.
                    example: "admin_user"
                  password:
                    type: string
                    description: The user's password.
                    example: "admin123"
                required:
                  - username
                  - password
        responses:
          '200':
            description: Successful login
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Login successful"
          '401':
            description: Unauthorized - invalid credentials
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Invalid credentials"
          '500':
            $ref: '#/components/responses/ServerError'

  /logout:
    post:
      summary: User Logout
      description: Logs out a user by clearing authentication tokens.
      tags:
        - Authentication
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          description: Unauthorized - user is not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not logged in"
        '500':
          $ref: '#/components/responses/ServerError'

  /validate:
    get:
      summary: Validates the user's token.
      description: Checks the validity of the token provided in the user's cookies.
      tags:
        - Authentication
      operationId: validateToken
      responses:
        '200':
          description: Token is valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is valid
        '401':
          description: Unauthorized - Token is missing, expired, or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token expired or invalid.

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          description: Unique identifier for the user. Defaults to a generated UUID.
          example: "550e8400-e29b-41d4-a716-446655440000"
        username:
          type: string
          description: Unique username for the user.
          example: "john_doe"
        password:
          type: string
          description: Hashed password of the user.
        roles:
          type: array
          description: List of roles assigned to the user.
          items:
            type: string
            enum:
              - admin
              - clinicadmin
              - doctor
              - patient
          default: ["patient"]
          example: ["doctor", "clinicadmin"]
        doctorid:
          type: string
          nullable: true
          description: Identifier of the doctor if the user is a clinic doctor.
          example: "doctor12345"
        patientid:
          type: string
          nullable: true
          description: Identifier of the patient if the user is associated with a patient record.
          example: "patient12345"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created.
          example: "2023-10-25T08:40:51.620Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated.
          example: "2023-10-26T08:40:51.620Z"
      required:
        - username
        - password
        - roles
      description: Schema for the User model, including fields for unique ID, username, password, role, and optional associations with patient and clinic.

  securitySchemes:
    # Define any security schemes if relevant (e.g., JWT authentication).

  # Add other reusable components here (e.g., responses, request bodies).
  responses:
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Server error"
